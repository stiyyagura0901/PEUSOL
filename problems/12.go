package problems
import "fmt"

func primeFactorization(n int) (pfs map[int]int) {
      pfs = make(map[int]int)

      // Get the number of 2s that divide n
      for n%2 == 0 {
              if _, ok := pfs[2]; ok {
                      pfs[2]++
              } else {
                      pfs[2] = 1
              }
              n = n / 2
      }

      // n must be odd at this point. so we can skip one element
      // (note i = i + 2)
      for i := 3; i*i <= n; i = i + 2 {
              // while i divides n, append i and divide n
              for n%i == 0 {
                      if _, ok := pfs[i]; ok {
                              pfs[i]++
                      } else {
                              pfs[i] = 1
                      }
                      n = n / i
              }
      }

      // This condition is to handle the case when n is a prime number
      // greater than 2
      if n > 2 {
              pfs[n] = 1
      }

      return
}

func numberOfDivisors(n int) int {
	pfs := primeFactorization(n)

	num := 1
	for _, exponents := range pfs {
					num *= (exponents + 1)
	}

	return num
}

// Twelve ...
func Twelve() {
	fmt.Println(`The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

	1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
	
	Let us list the factors of the first seven triangle numbers:
	
	 1: 1
	 3: 1,3
	 6: 1,2,3,6
	10: 1,2,5,10
	15: 1,3,5,15
	21: 1,3,7,21
	28: 1,2,4,7,14,28
	We can see that 28 is the first triangle number to have over five divisors.
	
	What is the value of the first triangle number to have over five hundred divisors?`)

	numOfDivisorsToFind := 500
	nextNum := 1
	num := 2

	for {
		nod := numberOfDivisors(nextNum)
		if nod > numOfDivisorsToFind {
			break
		}
		nextNum += num
		num++
	}

	fmt.Println("Answer:", nextNum)
}
